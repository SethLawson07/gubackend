// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId()
    user_name       String
    email           String?        @unique
    agentId         String?        @db.ObjectId
    agent           User?          @relation("agent_customeur", fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    customers       User[]         @relation(name: "agent_customeur")
    password        String
    phone           String         @unique
    profile_picture String
    is_admin        Boolean
    finance_pro_id  String?        @default("")
    is_verified     Boolean?       @default(false)
    role            String //customer,agent,delivery_man,command_handler,admin
    first_login     Boolean        @default(true)
    device_token    String         @default("")
    Contribution    Contribution[]
}

model Category {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId()
    name        String        @unique
    image       String
    featured    Boolean
    SubCategory SubCategory[]
}

model ServiceCategory {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId()
    name     String
    image    String
    featured Boolean
}

model SubCategory {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId()
    name          String
    image         String
    featured      Boolean
    category_data Category @relation(fields: [category], references: [id])
    category      String   @db.ObjectId()
    Item          Item[]
}

model Item {
    id               String      @id @default(auto()) @map("_id") @db.ObjectId()
    name             String
    image            String
    featured         Boolean
    schema           String
    subcategory_data SubCategory @relation(fields: [subcategory], references: [id])
    subcategory      String      @db.ObjectId()
    Product          Product[]
}

model Product {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId()
    name            String
    description     String?
    images          String[]
    item            String   @db.ObjectId()
    featured        Boolean
    in_stock        Int
    price           Float
    pay_at_delivery Boolean
    is_in_discount  Boolean
    discount_price  Float?
    fields          String?
    brand           String   @db.ObjectId()
    brand_data      Brand    @relation(fields: [brand], references: [id])
    item_data       Item     @relation(fields: [item], references: [id])
    // color           String
}

model PromoCode {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId()
    code            String   @unique
    valid           Boolean
    discount        Int
    conditions      String[]
    featured        Boolean
    expiration_date String
}

model Slider {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId()
    big_text String
    alt_text String
    image    String
    featured Boolean
}

type Delivery_address {
    name        String
    email       String
    phone       String
    map_address String
}

model Order {
    id               String           @id @default(auto()) @map("_id") @db.ObjectId
    user             String
    amount           Float
    remainder        Float
    paid             Boolean
    cart             Json
    promocodes       String[]
    status           String
    delivery_type    String           @default("")
    delivery_address Delivery_address
    // delivery_status  String // PENDING, RECEIVED
}

model Transaction {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    user   String
    date   String
    amount Float
    detail String?
}

model PromoCodeUsage {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    code String
    user String
}

model Brand {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String    @unique
    image    String
    featured Boolean
    Product  Product[]
}

model Service {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    category      String
    description   String
    pictures      String[]
    seller_number String
}

model Account {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    accountNumber String
    type          String // saving, tontine
    user          String
    amount        Float
    createdAt     DateTime
}

type Case {
    id                 String @map("_id") @db.ObjectId
    contributionStatus String @default("unpaid") // ["paid","unpaid","awaiting"]
    sheet              String
    index              Int
}

type Sheet {
    id          String    @map("_id") @db.ObjectId
    createdAt   DateTime
    openedAt    DateTime?
    closeAt     DateTime?
    cases       Case[]
    bet         Int?
    status      String // "notopened" "opened" "closed"
    book        String
    index       Int
    closeReason String?
}

model Book {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    customer    String
    bookNumber  String
    createdAt   DateTime
    status      String // "*()notopened" "opened" "closed"
    sheets      Sheet[]
    closeReason String?
}

model Contribution {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    customer  User     @relation(fields: [userId], references: [id])
    cases     Int[]
    amount    Float    @default(0.0)
    agent     String?
    admin     String?
    account   String
    createdAt DateTime
    pmethod   String   @default("") // (payment method)  agent,tmoney,moovmoney
    awaiting  String   @default("") // agent, admin, none
    status    String   @default("unpaid") //paid, unpaid, awaiting
    userId    String   @db.ObjectId()
}

model Notification {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    user    String
    title   String
    message String
    status  String @default("unseen") // seen, unseen
}

model Caroussel {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    code        String
    link        String
    image       String
    title       String
    linkText    String
    buttomText  String
    description String
}

model Section {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String // Name == Title
    contenttype String // product, category, promotion(promo card) // service
    featured    Boolean
    content     String[]
}

model Deposit {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    account   String
    customer  String
    createdAt DateTime
    payment   String // agent,tmoney,moovmoney
    amount    Float
    madeby    String // User who do the transaction (User role)
}

// model Activity {

// }
