// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId()
    user_name       String
    email           String?        @unique
    agentId         String?        @db.ObjectId
    agent           User?          @relation("agent_customeur", fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    customers       User[]         @relation(name: "agent_customeur")
    password        String
    phone           String         @unique
    profile_picture String
    is_admin        Boolean
    finance_pro_id  String?        @default("")
    is_verified     Boolean?       @default(false)
    role            String //customer,agent,delivery_man,command_handler,admin
    first_login     Boolean        @default(true)
    device_token    String         @default("")
    location        String?
    Contribution    Contribution[]
    Commission      Commission[]
    Activity        Activity[]
    RepCustomer     Report[]       @relation("Customer")
    RepAgent        Report[]       @relation("Agent")
    CBetReport      BetReport[]    @relation("BRCustomer")
    ABetReport      BetReport[]    @relation("BRAgent")
    Book            Book[]
    Account         Account[]
    OrderProduct    OrderProduct[]
    OrderService    OrderService[]
}

model Account {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    number    String
    type      String // saving, tontine
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId()
    balance   Float
    createdAt DateTime
}

type Case {
    id                 String @map("_id") @db.ObjectId
    contributionStatus String @default("unpaid") // ["paid","unpaid","awaiting"]
    sheet              String
    index              Int
}

type Sheet {
    id          String    @map("_id") @db.ObjectId
    createdAt   DateTime
    openedAt    DateTime?
    closeAt     DateTime?
    cases       Case[]
    bet         Int?
    status      String // "notopened" "opened" "closed"
    book        String
    index       Int
    closeReason String?
}

model Book {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    customer    User     @relation(fields: [userId], references: [id])
    bookNumber  String
    createdAt   DateTime
    status      String // "*()notopened" "opened" "closed"
    sheets      Sheet[]
    closeReason String?
    userId      String   @db.ObjectId()
}

model Contribution {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    customer     User        @relation(fields: [userId], references: [id])
    userId       String      @db.ObjectId()
    cases        Int[]
    sheet        String
    amount       Float       @default(0.0)
    agent        String?
    admin        String?
    pmethod      String      @default("") // (payment method)  agent, tmoney, moovmoney
    awaiting     String      @default("") // agent, admin, none
    status       String      @default("unpaid") //paid, unpaid, awaiting, rejected
    createdAt    DateTime
    report       Report      @relation(fields: [reportId], references: [id])
    reportId     String      @db.ObjectId
    commission   Commission? @relation(fields: [commissionId], references: [id])
    commissionId String?     @db.ObjectId
}

model Notification {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    user    String
    title   String
    message String
    status  String @default("unseen") // seen, unseen
}

model Caroussel {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    code        String
    link        String
    image       String
    title       String
    linkText    String
    buttomText  String
    description String
}

model CarousselService {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    code        String
    image       String
    description String
}

model Deposit {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    account   String
    customer  String
    createdAt DateTime
    payment   String // agent,tmoney,moovmoney
    amount    Float
    madeby    String // User transaction (User role) or agent, tmoney, moovmoney
    report    Report   @relation(fields: [reportId], references: [id])
    reportId  String   @db.ObjectId
}

model Activity {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId()
    title     String?  @default("")
    type      String // deposit, contribution, delivery
    body      String?
    amount    Float?   @default(0)
    createdat DateTime
}

model Commission {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    amount   Float
    customer User   @relation(fields: [userId], references: [id])
    userId   String @db.ObjectId()
    sheet    String
    payment  String // agent, flooz, tmoney

    createdat    DateTime
    Contribution Contribution[]
}

model Report {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    payment String // agent, tmoney, flooz
    cases   Int[]
    sheet   Sheet?
    type    String // contribution, deposit

    amount      Float
    createdat   DateTime
    validatedat DateTime?

    customer   User   @relation("Customer", fields: [customerId], references: [id])
    customerId String @db.ObjectId()

    agent   User?   @relation("Agent", fields: [agentId], references: [id])
    agentId String? @db.ObjectId()

    status       String
    Contribution Contribution[]
    Deposit      Deposit[]
}

// For reports
model BetReport {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    goodnessbalance Float // Gain Goodness 
    agentbalance    Float // Gain Agent 
    customer        User     @relation("BRCustomer", fields: [customerId], references: [id])
    customerId      String   @db.ObjectId()
    agent           User?    @relation("BRAgent", fields: [agentId], references: [id])
    agentId         String?  @db.ObjectId()
    type            String // book, bet
    createdat       DateTime
}

model Banner {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId()
    name      String   @default("No_name")
    image     String
    link      String
    createdat DateTime
    featured  Boolean  @default(true)
}

model Category {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    title        String
    image        String
    featured     Boolean       @default(false)
    createdat    DateTime      @default(now())
    slugcategory String
    SubCategory  SubCategory[]
}

model SubCategory {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    image      String
    category   Category @relation(fields: [categoryId], references: [id])
    featured   Boolean  @default(false)
    createdat  DateTime @default(now())
    categoryId String   @db.ObjectId
    Item       Item[]
}

model Item {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    title         String
    image         String
    subcategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
    featured      Boolean       @default(false)
    slugitem      String        @unique
    createdat     DateTime      @default(now())
    subCategoryId String        @db.ObjectId
    Product       Product[]
    // Variant       Variant[]
    itemVariant   ItemVariant[]
    Filters       Filters[]
}

model Brand {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    image     String
    featured  Boolean  @default(false)
    createdat DateTime @default(now())
}

model Product {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    qte            Int
    price          String
    oldPrice       String?          @default("")
    discount       String?          @default("")
    rating         String           @default("4")
    goodpay        String?          @default("")
    color          String[]         @default([])
    size           String[]         @default([])
    prices         String[]         @default([])
    brand          String?          @default("")
    description    String
    spec           String
    tag            String[]
    images         String[]
    item           Item             @relation(fields: [itemId], references: [id])
    slugproduct    String           @unique
    featured       Boolean          @default(false)
    createdat      DateTime         @default(now())
    itemId         String           @db.ObjectId
    Order          OrderProduct[]
    productVariant ProductVariant[]
    section        Section          @relation(fields: [sectionId], references: [id])
    sectionId      String           @default("nop") @db.ObjectId
}

model Filters {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    title   String
    name    String
    item    Item    @relation(fields: [itemId], references: [id])
    options Json[]
    custom  Boolean
    itemId  String  @db.ObjectId
}

model ProductVariant {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    color     String
    image     String
    size      Json
    product   Product  @relation(fields: [productId], references: [id])
    featured  Boolean  @default(false)
    createdat DateTime @default(now())
    productId String   @db.ObjectId
}

model ItemVariant {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    value     String[] @default([])
    item      Item     @relation(fields: [itemId], references: [id])
    featured  Boolean  @default(false)
    createdat DateTime @default(now())
    itemId    String   @db.ObjectId
}

model OrderProduct {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    user          User     @relation(fields: [userId], references: [id])
    product       Product  @relation(fields: [productId], references: [id])
    qte           Int
    amount        String
    paymentstatus Boolean
    delivery      Boolean  @default(false)
    featured      Boolean  @default(true)
    createdat     DateTime @default(now())
    productId     String   @db.ObjectId
    userId        String   @db.ObjectId()
}

model OrderService {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    user          User     @relation(fields: [userId], references: [id])
    paymentstatus Boolean
    delivery      Boolean  @default(false)
    featured      Boolean  @default(true)
    createdat     DateTime @default(now())
    userId        String   @db.ObjectId()
}

model Area {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    featured  Boolean   @default(true)
    createdat DateTime  @default(now())
    Section   Section[]
}

model Section {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    slugsection String
    area        Area          @relation(fields: [areaId], references: [id])
    featured    Boolean       @default(true)
    createdat   DateTime      @default(now())
    areaId      String        @db.ObjectId
    Product     Product[]
    ItemService ItemService[]
}

model Service {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    image       String
    featured    Boolean       @default(true)
    createdat   DateTime      @default(now())
    slugservice String
    TypeService TypeService[]
}

model TypeService {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    title           String
    image           String
    featured        Boolean       @default(true)
    createdat       DateTime      @default(now())
    slugtypeservice String
    service         Service       @relation(fields: [serviceId], references: [id])
    serviceId       String        @db.ObjectId
    ItemService     ItemService[]
}

model ItemService {
    id              String      @id @default(auto()) @map("_id") @db.ObjectId
    title           String
    images          String[]
    price           String
    description     String
    slugitemservice String
    section         Section     @relation(fields: [sectionId], references: [id])
    featured        Boolean     @default(true)
    createdat       DateTime    @default(now())
    // sectionId       String      @default("1A2B3C4D5E6F") @db.ObjectId
    sectionId       String      @default("6088dd5f3e6e40001505551a") @db.ObjectId
    typeservice     TypeService @relation(fields: [typeServiceId], references: [id])
    typeServiceId   String      @db.ObjectId
}

model Slider {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    file      String
    type      String //video or image
    link      String
    position  String
    featured  Boolean  @default(true)
    createdat DateTime @default(now())
}

model PromoCode {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    name               String
    discountpercentage String
    Expirationdate     DateTime @default(now())
    featured           Boolean  @default(true)
    createdat          DateTime @default(now())
}

model collection {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    place     String
    address   String
    lat       String
    long      String
    day       String
    starttime String
    endtime   String
    featured  Boolean  @default(true)
    createdat DateTime @default(now())
}
