// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                           String         @id @default(auto()) @map("_id") @db.ObjectId()
    user_name                    String
    email                        String?        @unique
    agentId                      String?        @db.ObjectId
    agent                        User?          @relation("agent_customeur", fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    customers                    User[]         @relation(name: "agent_customeur")
    password                     String
    phone                        String         @unique
    profile_picture              String
    is_admin                     Boolean
    finance_pro_id               String?
    is_verified                  Boolean?
    role                         String //customer,agent,delivery_man,command_handler,admin
    user_contributions           Contribution[] @relation(name: "user_contributions")
    admin_contributions_validate Contribution[] @relation(name: "admin_contributions_validate")
    agent_contributions_validate Contribution[] @relation(name: "agent_contributions_validate")
    books Book[] @relation(name: "user book")
}

model Category {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId()
    name        String        @unique
    image       String
    featured    Boolean
    SubCategory SubCategory[]
}

model SubCategory {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId()
    name          String
    image         String
    featured      Boolean
    category_data Category @relation(fields: [category], references: [id])
    category      String   @db.ObjectId()
    Item          Item[]
}

model Item {
    id               String      @id @default(auto()) @map("_id") @db.ObjectId()
    name             String
    image            String
    featured         Boolean
    schema           String
    subcategory_data SubCategory @relation(fields: [subcategory], references: [id])
    subcategory      String      @db.ObjectId()
    Product          Product[]
}

model Product {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId()
    name            String
    description     String?
    images          String[]
    item            String   @db.ObjectId()
    featured        Boolean
    in_stock        Int
    price           Float
    pay_at_delivery Boolean
    is_in_discount  Boolean
    discount_price  Float?
    fields          String?
    brand           String   @db.ObjectId()
    brand_data      Brand    @relation(fields: [brand], references: [id])
    item_data       Item     @relation(fields: [item], references: [id])
    // color           String
}

model PromoCode {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId()
    code            String   @unique
    valid           Boolean
    discount        Int
    conditions      String[]
    featured        Boolean
    expiration_date String
}

model Slider {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId()
    big_text String
    alt_text String
    image    String
    featured Boolean
}

type Delivery_address {
    name        String
    email       String
    phone       String
    map_address String
}

model Order {
    id               String           @id @default(auto()) @map("_id") @db.ObjectId
    user             String
    amount           Float
    remainder        Float
    paid             Boolean
    cart             Json
    promocodes       String[]
    status           String
    delivery_type    String
    delivery_address Delivery_address
}

model Transaction {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    user         String
    date         String
    amount       Float
    contribution Contribution?
}

model PromoCodeUsage {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    code String
    user String
}

model Brand {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String    @unique
    image    String
    featured Boolean
    Product  Product[]
}

model Services {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    description   String
    pictures      String[]
    seller_number String
}

type Case {
    id                 String @map("_id") @db.ObjectId
    index              Int // valeurs possibles [1-31]
    contributionStatus String @default("unpaid") // ["paid","unpaid","awaiting"]
}

type Sheet {
    id        String   @map("_id") @db.ObjectId
    createdAt DateTime
    openedAt  DateTime?
    index     Int // valeurs possibles [1-12]
    cases     Case[]
    bet       Int
    status    String // "notopened" "opened" "closed"
}

model Book {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    customer         User        @relation(name: "user book", fields: [customerId], references: [id])
    customerId       String      @db.ObjectId
    bookNumber     String 
    createdAt     DateTime
    sheets        Sheet[]
    status        String // "notopened" "opened" "closed"
    contributions Contribution[]
}

model Contribution {
    id               String      @id @default(auto()) @map("_id") @db.ObjectId
    customer         User        @relation(name: "user_contributions", fields: [customerId], references: [id])
    customerId       String      @db.ObjectId
    agent            User        @relation(name: "agent_contributions_validate", fields: [agentId], references: [id])
    agentId          String      @db.ObjectId
    admin            User        @relation(name: "admin_contributions_validate", fields: [agentId], references: [id])
    adminId          String      @db.ObjectId
    book             Book        @relation(fields: [bookId], references: [id])
    bookId           String      @db.ObjectId
    caseId           String      @db.ObjectId
    sheetId          String      @db.ObjectId
    createdAt        DateTime    @default(now())
    paymentmethod    String // agent,tmoney,moovmoney
    status           String      @default("unpaid") //awaiting,paid,unpaid
    customerHasPaid  Boolean     @default(false)
    agentHasValidate Boolean     @default(false)
    adminHasValidate Boolean     @default(false)
    transaction      Transaction @relation(fields: [transactionId], references: [id])
    transactionId    String      @unique @db.ObjectId
}
